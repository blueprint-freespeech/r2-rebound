syntax = "proto2";

package Protocol.Data.Control;

message Packet {
    // Must contain exactly one field
    optional OpenChannel open_channel = 1;
    optional ChannelResult channel_result = 2;
    optional KeepAlive keep_alive = 3;
    optional EnableFeatures enable_features = 4;
    optional FeaturesEnabled features_enabled = 5;
}

message OpenChannel {
    // warning: conversion to ‘int32_t’ {aka ‘int’} from ‘uint32_t’ {aka ‘unsigned int’} may change the sign of the result [-Wsign-conversion]
    // _impl_.channel_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
    //required int32 channel_identifier = 1;      // Arbitrary unique identifier for this channel instance
    required uint32 channel_identifier = 1; // Arbitrary unique identifier for this channel instance OpenChannel.channel_identifier
    required string channel_type = 2;           // String identifying channel type; e.g. im.ricochet.chat

    // It is valid to extend the OpenChannel message to add fields specific
    // to the requested channel_type.
    extensions 100 to max;
}

message ChannelResult {
    //required int32 channel_identifier = 1;      // Matching the value from OpenChannel
    required uint32 channel_identifier = 1;      // Matching the value from OpenChannel
    required bool opened = 2;                   // If the channel is now open

    // FIXME https://github.com/protocolbuffers/protobuf/issues/7224
    // warning: conversion from ‘uint64_t’ {aka ‘long unsigned int’} to ‘int’ may change value [-Wconversion]
    // if (PROTOBUF_PREDICT_TRUE(::Protocol::Data::Control::ChannelResult_CommonError_IsValid(val))) {
    enum CommonError {
        GenericError = 0;
        UnknownTypeError = 1;
        UnauthorizedError = 2;
        BadUsageError = 3;
        FailedError = 4;
    }

    optional CommonError common_error = 3;

    // As with OpenChannel, it is valid to extend this message with fields specific
    // to the channel type.
    extensions 100 to max;
}

message KeepAlive {
    required bool response_requested = 1;
}

message EnableFeatures {
    repeated string feature = 1;
    extensions 100 to max;
}

message FeaturesEnabled {
    repeated string feature = 1;
    extensions 100 to max;
}
